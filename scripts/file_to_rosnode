#!/usr/bin/env python
import rospy
import numpy as np
from geometry_msgs.msg import PoseStamped

f = open("temp.txt", "r")
firstline = f.readline()
secondline = f.readline()
thirdline = f.readline()
xyz = secondline.split("  ") #adjust this depending on spacing
rpy = thirdline.split("  ") #adjust this depending on spacing

def euler_to_quaternion(r):
    (yaw, pitch, roll) = (r[0], r[1], r[2])
    qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
    qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
    qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
    qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
    return [qx, qy, qz, qw]

rpy[3] = float(rpy[3])
quaternion = euler_to_quaternion(rpy[1:4])

def talker():
    rospy.sleep(5)
    pose_pub = rospy.Publisher("chatter", PoseStamped)
    rospy.init_node("talker")
    rospy.sleep(2)
    while not rospy.is_shutdown():
        april = PoseStamped()
        april.header.frame_id = "apriltag_pose"
        april.header.stamp = rospy.Time.now()
        april.pose.position.x = xyz[1]
        april.pose.position.y = xyz[2]
        april.pose.position.z = float(xyz[3])
        april.pose.orientation.x = quaternion[0]
        april.pose.orientation.y = quaternion[1]
        april.pose.orientation.z = quaternion[2]
        april.pose.orientation.w = quaternion[3]
        pose_pub.publish(april)
        rospy.sleep(1)

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass